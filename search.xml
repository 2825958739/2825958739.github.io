<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PicGo上传图片成功，但是GitHub图床上图片不显示问题</title>
      <link href="posts/77c754e.html"/>
      <url>posts/77c754e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​       前两天用 PicGo+github 做了个图床，在 PicGo 上把 github 的相关配置弄好后，成功实现了图片上传，而且访问图片链接也能成功显示出图片，但是今天打开博客文章发现文章中的图片迟迟加载不出来，刚开始我还以为是 github 访问慢造成的，后面又刷新了几次还是没加载，所以我就感觉出问题了。</p><blockquote><p>错误：在 github 的图床中打开图片报错<code>Failed to load resource: net::ERR_NAME_NOT_RESOLVE</code></p></blockquote><blockquote><p>原因与解决方法：官方更新了 dns，但是 dns 缓存没有被更新，导致错误解析。</p></blockquote><ol><li><p>打开一个域名解析网站 <a href="https://wpboke.net/go.html?url=https://ping.eu/nslookup">ping.eu/nslookup</a> 获取图片域名（raw.githubusercontent.com）的真实 ip 地址：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/2825958739/imgbed/posts202303021823633.png" alt="https://cdn.jsdelivr.net/gh/2825958739/imgbed/posts202303021823633.png"></p></li><li><p>把以上 IP 和域名映射起来：先找到 <code>C:\Windows\System32\drivers\etc\hosts</code> 文件，使用文本编辑器打开。再在文件后面添加以下内容</p></li></ol><pre class="line-numbers language-none"><code class="language-none">185.199.108.133 raw.githubusercontent.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   然后保存就可以了，如果遇到图片又不能显示了，大家可依据上述方法及时更新 ip 配置 host 文件即可。</p>]]></content>
      
      
      <categories>
          
          <category> 错误集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicGo </tag>
            
            <tag> 图床 </tag>
            
            <tag> 域名解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能环保小灯</title>
      <link href="posts/e515d166.html"/>
      <url>posts/e515d166.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h3><p><em>随着物联网技术的不断发展，传统的普通家居形式已经无法满足现今的万物互联及智能化的需求，家居设计者迫切需要更具现代化、更加智能的家居新模式。智能家居的出现，在实现家居正常功能的前提下，增加了许多新特性，极大地满足了居住者的需求。</em></p><p><em>信息技术的飞速发展，人类活动产生的数据量空前地增长，各类设备对数据的处理速度也在迅速地提升，大数据时代已经到来。大数据技术促进了很多行业的技术革新，人们的家居方式也依托数据处理不断地朝着数据化、网络化的方向发展。除了传统家居的一些基本功能之外，智能家居能够让人们对家中物品的使用情况了解得更加详细，同时也能更方便地远程控制家居物品。</em></p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a><strong>需求分析</strong></h3><p>在我们的日常生活中，很多人没有随手关灯的习惯，比如在寝室有的人懒的可怕，从而产生了些没必要的电资源浪费。为解决许多人没有随手关灯的好习惯而导致的电资源浪费的问题，有数据显示，光是每天下班后不关闭电源将导致全国每年将浪费电12.775亿千瓦时。所以节能将耗是刻不容缓的事情，而我设计的这款智能环保小灯能有效解决这个问题，实现真正的人走灯灭，无线控制。这款小夜灯有如下功能：</p><ol><li>智能环保小灯配备人体红外感应传感器以及光敏电阻实现照明的自动化，点亮和熄灭时会产生渐明渐暗效果，在点亮过程中有呼吸灯的效果。</li><li>接入点灯科技物联网应用平台，可通过手机APP检测各项数据并控制小灯的开和关。该多功能智能电灯拥有一个系统默认颜色，若用户想显示其他颜色可通过手机APP进行上的滑条进行设置，从而实现一个氛围灯的效果。</li><li>于此同时还接入了小爱同学，实现照明的智能化，可通过语音指令控制多功能智能电灯的开关及亮度调节。让懒人躺在床上闭着眼也能关上灯。</li><li>通过ESP8266实现设备的联网，设备在线时，每隔一分钟就会自动的反馈设备状况。</li></ol><h3 id="硬件选择与设计"><a href="#硬件选择与设计" class="headerlink" title="硬件选择与设计"></a><strong>硬件选择与设计</strong></h3><h4 id="材料准备"><a href="#材料准备" class="headerlink" title="材料准备"></a><strong>材料准备</strong></h4><p>  <strong>环保智能小夜灯制作材料清单：</strong></p><table><thead><tr><th align="center"><strong>名称</strong></th><th><strong>数量</strong></th><th align="center"><strong>价格/元</strong></th></tr></thead><tbody><tr><td align="center">NodemcuESP8266开发板</td><td><strong>1</strong></td><td align="center"><strong>13</strong></td></tr><tr><td align="center">红外人体感应模块</td><td><strong>1</strong></td><td align="center"><strong>4.16</strong></td></tr><tr><td align="center">光敏电阻（5528）</td><td><strong>1</strong></td><td align="center"><strong>0.2</strong></td></tr><tr><td align="center">分压电阻 (10KΩ – 配合5528光敏电阻用)</td><td><strong>1</strong></td><td align="center"></td></tr><tr><td align="center">RGB LED（共阴极）</td><td><strong>1</strong></td><td align="center"></td></tr><tr><td align="center">限流电阻 100Ω</td><td><strong>3</strong></td><td align="center"></td></tr><tr><td align="center">面包板</td><td><strong>1</strong></td><td align="center"></td></tr><tr><td align="center">杜邦线</td><td><strong>20</strong></td><td align="center"></td></tr><tr><td align="center">USB 延长线</td><td><strong>1</strong></td><td align="center"></td></tr></tbody></table><h4 id="NodeMCU开发板"><a href="#NodeMCU开发板" class="headerlink" title="NodeMCU开发板"></a>NodeMCU开发板</h4><p>ESP8266-NodeMCU是一个开源硬件开发板，由于它支持WIFI功能，所以在物联网（IOT）领域，Arduino开发板最大的对手之一就是ESP8266-NodeMCU开发板。ESP8266-NodeMCU尺寸与Nano类似, 他并不是Arduino团队开发的，但是我们也可以使用Arduino IDE 对他进行开发。而且他还有一颗地道的<a href="http://espressif.com/zh-hans/home">“中国芯”—ESP8266模块</a>。</p><p>NodeMCU开发板上的两排插针与ESP8266芯片的引脚相连。有了开发板上的两排插针，我们就可以很轻松的使用杜邦线将芯片的引脚接到实验电路中。NodeMCU开发板上还配有USB接口以及电压转换电路。这些为我们提供了很大的便利。我们只要用一根USB数据线就可以轻松的实现为ESP8266供电以及上传程序的操作。</p><p><strong>电压电流限制</strong>：</p><p>NodeMCU开发板引脚的输入输出电压限制是3.3 V。如果向引脚施加3.6V以上的电压就有可能对芯片电路造成损坏。同时请注意，这些引脚的最大输出电流是12mA。由于NodeMCU开发板的引脚允许电压和电流都是低于Arduino开发板的引脚，所以如您想要将NodeMCU与Arduino引脚相互连接，请特别注意这两个开发板的引脚电压和电流的区别。如果操作不当可能会损坏NodeMCU开发板。</p><p><strong>特殊引脚情况说明</strong>：</p><p>GPIO2引脚 在NodeMCU开发板启动时是不能连接低电平的。</p><p>GPIO15引脚在开发板运行中一直保持低电平状态。因此请不要使用GPIO15引脚来读取开关状态或进行I²C通讯。</p><p>GPIO0引脚在开发板运行中需要一直保持高电平状态。否则ESP8266将进入程序上传工作模式也就无法正常工作了。您无需对GPIO0引脚进行额外操作，因为NodeMCU的内置电路可以确保GPIO0引脚在工作时连接高电平而在上传程序时连接低电平。</p><p><strong>上拉电阻/下拉电阻</strong></p><p>GPIO 0-15引脚都配有内置上拉电阻。这一点与Arduino十分类似。GPIO16 引脚配有内置下拉电阻。</p><p><strong>模拟输入</strong></p><p>ESP8266 只有一个模拟输入引脚（该引脚通过模拟-数字转换将引脚上的模拟电压数值转化为数字量）。此引脚可以读取的模拟电压值为 0 – 1.0V。请注意：ESP8266 芯片模拟输入引脚连接在1.0V以上电压可能损坏ESP8266芯片。</p><p>以上所描述的是针对ESP8266芯片的引脚。而对于NodeMCU开发板引脚，情况就不同了。</p><p>NodeMCU开发板配有降压电路。您可以用NodeMCU开发板的模拟输入引脚读取0-3.3V的模拟电压信号。</p><p><strong>通讯串行端口</strong></p><p>ESP8266有2个硬件串行端口（UART）。</p><p>串行端口0（UART0）使用GPIO1和GPIO3引脚。其中GPIO1引脚是TX0，GPIO3是RX0。</p><p>串行端口1（UART1）使用GPIO2和GPIO8引脚。其中GPIO2引脚是TX1，GPIO8是RX1。请注意，由于GPIO8被用于连接闪存芯片，串行端口1只能使用GPIO2来向外发送串行数据。</p><p>I²C：ESP8266只有软件模拟的I²C端口，没有硬件I²C端口。也就是说我们可以使用任意的两个GPIO引脚通过软件模拟来实现I²C通讯。ESP8266的数据表（datasheet）中，GPIO2标注为SDA，GPIO14标注为SCL。</p><p>SPI：ESP8266的SPI端口情况如下：GPIO14 — CLK、GPIO12 — MISO、GPIO13 — MOSI、GPIO 15 — CS(SS)</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/03/02/ppFgjgK.png" alt="https://s1.ax1x.com/2023/03/02/ppFgjgK.png"> </p><p>ESP8266芯片：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/03/02/ppFgzuD.png" alt="https://s1.ax1x.com/2023/03/02/ppFgzuD.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/03/02/ppF2pHH.png" alt="https://s1.ax1x.com/2023/03/02/ppF2pHH.png"> </p><p><strong>ESP8266-NodeMCU引脚：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/03/02/ppF2CEd.png" alt="https://s1.ax1x.com/2023/03/02/ppF2CEd.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/03/02/ppF2PUA.png" alt="https://s1.ax1x.com/2023/03/02/ppF2PUA.png"> </p><h4 id="人体红外感应传感器模块"><a href="#人体红外感应传感器模块" class="headerlink" title="人体红外感应传感器模块"></a><strong>人体红外感应传感器模块</strong></h4><p>红外热释电传感器是一款基于热释电效应的人体热释运动传感器，能检测到人体或动物身上发出的红外线，配合菲涅尔透镜能使传感器探测范围更远更广。可在控制器上编程应用，通过3P传感器连接线插接到专用传感器扩展板上使用，可以轻松实现人体或动物检测的相关的互动效果。 基于红外线技术的自动控制产品，当有人进入开关感应范围时，专用传感器探测到人体红外光谱的变化，自动输出高电平，人不离开感应范围，将持续输出高电平；人离开后，开关延时自动关闭负载。</p><p>工作原理</p><p>​    人体都有恒定的体温，一般在37度，所以会发出特定波长10UM左右的红外线，被动式红外探头就是靠探测人体发射的10UM左右的红外线而进行工作的。人体发射的10UM左右的红外线通过菲泥尔滤光片增强后聚集到红外感应源上。红外感应源通常采用热释电元件，这种元件在接收到人体红外辐射温度发生变化时就会失去电荷平衡，向外释放电荷，后续电路经检测处理后就能产生报警信号。</p><p>​    热释电效应：当一些晶体受热时，在晶体两端将会产生数量相等而符号相反的电荷。这种由于热变化而产生的电极化现象称为热释电效应。</p><p>菲涅耳透镜：根据菲涅耳原理制成，菲涅耳透镜分为折射式和反射式两种形式，其作用一是聚焦作用，将热释的红外信号折射（反射）在PIR上；二是将检测区内分为若干个明区和暗区，使进入检测区的移动物体能以温度变化的形式在PIR上产生变化热释红外信号，这样PIR就能产生变化电信号。使热释电人体红外传感器(PIR)灵敏度大大增加。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/03/02/ppF2Q5n.png" alt="https://s1.ax1x.com/2023/03/02/ppF2Q5n.png"></p><p><strong>原理图计：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/03/02/ppF2aVJ.png" alt="https://s1.ax1x.com/2023/03/02/ppF2aVJ.png"></p><p><strong>特性：</strong></p><ul><li>1、全自动感应:人进入其感应范围则输出高电平，人离开感应范围则自动延 </li><li>时关闭高电平，输出低电平。 </li><li>2、光敏控制（可选择，出厂时未设）可设置光敏控制，白天或光线强时不 </li><li>感应。</li><li>3、温度补偿(可选择，出厂时未设)：在夏天当环境温度升高至 30～32℃， </li><li>探测距离稍变短，温度补偿可作一定的性能补偿。 </li><li>4、两种触发方式：（可跳线选择） </li><li>a、不可重复触发方式:即感应输出高电平后，延时时间段一结束，输出将自动从高电平变成低电平； </li><li>b、可重复触发方式：即感应输出高电平后，在延时时间段内，如果有 </li><li>人体在其感应范围活动，其输出将一直保持高电平，直到人离开后才延时将 </li><li>高电平变为低电平（感应模块检测到人体的每一次活动后会自动顺延一个延 </li><li>时时间段，并且以最后一次活动的时间为延时时间的起始点)。 </li><li>5(默认设置:2.5S 封锁时间)：感应模块在每一次感应输出后（高电平变成 </li><li>低电平），可以紧跟着设置一个封锁时间段，在此时间段内感应器不接受任何感 </li><li>应信号。此功能可以实现“感应输出时间”和“封锁时间”两者的间隔工作，可应 </li><li>用于间隔探测产品；同时此功能可有效抑制负载切换过程中产生的各种干扰。 (此 </li><li>时间可设置在零点几秒 —几十秒钟)。 </li><li>6、工作电压范围宽：默认工作电压 DC4.5V-20V。 </li><li>7、微功耗:静态电流&lt;50 微安，特别适合干电池供电的自动控制产品。 </li><li>8、输出高电平信号：可方便与各类电路实现对接。</li></ul><h4 id="光敏传感器模块"><a href="#光敏传感器模块" class="headerlink" title="光敏传感器模块"></a>光敏传感器模块</h4><p>为了降低成本，本案直接选用光敏电阻作为光照检测器件。 光敏电阻是一种感应光线的强弱的传感器。在光敏传感器中，当感应光强度不同，光敏探头内的电阻值就会有变化。光敏传感器适合测量室外自然光线，常用 于环境或生物监控中。光敏传感器内装有一个高精度的光电管，光电管内有一块由 “针式二管”组成的小平板，当向光电管两端施加一个反向的固定压时，任何光了 对它的冲击都将导致其释放出电子，结果是，当光照强度越高，光电管的电流也就越 大，电流通过一个电阻时，电阻两端的电压被转换成可被采集器的数模转换器接受的 0-5V 电压，然后采集以适当的形式把结果保存下来.简单的说，光敏传感器就是利用光敏电阻受光线强度影响而阻值发生变化的原理向机器人主机发送光线强度的模拟信号。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/03/02/ppF2r26.png" alt="https://s1.ax1x.com/2023/03/02/ppF2r26.png"></p><p><strong>原理图设计：</strong></p><p> <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/03/02/ppF26KO.png" alt="https://s1.ax1x.com/2023/03/02/ppF26KO.png"></p><p><strong>特性：</strong></p><ul><li>1、光敏电阻模块对环境光线最敏感，一般用来检测周围环境的光线的亮度，触发单片机或继电器模块等；</li><li>2、体积小、反应速度快、安全性能高、寿命长</li><li>3、性能稳定、绿色环保</li></ul><h4 id="线路搭建"><a href="#线路搭建" class="headerlink" title="线路搭建"></a><strong>线路搭建</strong></h4><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/03/02/ppF2RVH.png" alt="https://s1.ax1x.com/2023/03/02/ppF2RVH.png"></p><h3 id="软件设计"><a href="#软件设计" class="headerlink" title="软件设计"></a>软件设计</h3><h4 id="搭建Arduino-IDE开发环境"><a href="#搭建Arduino-IDE开发环境" class="headerlink" title="搭建Arduino IDE开发环境"></a>搭建Arduino IDE开发环境</h4><p><strong>安装 ESP8266-NodeMCU开发板驱动</strong></p><p>NodeMCU开发板不是即插即用的设备，因此我们先要为它在电脑上安装驱动程序以后才能使用。准备安装驱动程序安装 ESP8266-NodeMCU开发板驱动前，请先确保您的电脑已连接互联网。另外，请将NodeMCU开发板和USB数据线准备好以备安装使用。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/03/02/ppF2oxf.png" alt="https://s1.ax1x.com/2023/03/02/ppF2oxf.png"></p><p><strong>为ESP8266-NodeMCU搭建Arduino IDE开发环境</strong></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="file:///C:\Users\陈梁\AppData\Local\Temp\ksohtml17764\wps18.png" alt="img"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="file:///C:\Users\陈梁\AppData\Local\Temp\ksohtml17764\wps19.png" alt="img"> </p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="file:///C:\Users\陈梁\AppData\Local\Temp\ksohtml17764\wps20.png" alt="img"> </p><p>NodeMCU开发板的无线终端模式</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/03/02/ppF2XIs.png" alt="https://s1.ax1x.com/2023/03/02/ppF2XIs.png"></p><h4 id="点灯科技物联网平台"><a href="#点灯科技物联网平台" class="headerlink" title="点灯科技物联网平台"></a><strong>点灯科技物联网平台</strong></h4><p><strong>物联网应用平台的选择：点灯科技</strong></p><p>简介：点灯是一套专业且易用物联网解决方案，提供了服务器、应用、设备端sdk支持。 基于高性能异步框架开发的服务器端可以承载大量设备连接，让设备所有者方便的进行设备管理；简单便捷的应用配合多设备支持的sdk，可以让开发者在3分钟内实现设备的接入。 点灯服务有三个版本，社区版开源且免费，让大家可以体验到点灯方案的特点和优势；云服务版提供更多增值服务与功能，且有效降低客户的项目实施成本，让客户更快的进行物联网升级；商业版可进行独立部署，可以满足客户更多样的需求；</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/03/02/ppF2xGq.png" alt="https://s1.ax1x.com/2023/03/02/ppF2xGq.png"></p><p><strong>物联网应用平台的使用：</strong></p><p><strong>1、**</strong>下载安装blinker-Arduino的库：**<br>打开arduino，点击项目，——加载库——管理库下搜索blinker安装最新版本</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/03/02/ppFRSzV.png" alt="https://s1.ax1x.com/2023/03/02/ppFRSzV.png"></p><p><strong>2、下载BlinkerAPP**</strong>按照图片上的步骤可以获取到secret Key** <strong>。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/03/02/ppFRkdJ.png" alt="https://s1.ax1x.com/2023/03/02/ppFRkdJ.png"></p><p> <strong>3、**</strong>手机上的小爱配置**</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/2825958739/imgbed/posts202303021740351.png" alt="https://cdn.jsdelivr.net/gh/2825958739/imgbed/posts202303021740351.png"></p><p>对小爱说：“打开灯”、“关闭灯”、“将灯的亮度调为50”</p><p><strong>4、用手机给esp8266配网：</strong></p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/2825958739/imgbed/posts202303021747409.png" alt="https://cdn.jsdelivr.net/gh/2825958739/imgbed/posts202303021747409.png"></h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/2825958739/imgbed/posts202303021743018.png" alt="https://cdn.jsdelivr.net/gh/2825958739/imgbed/posts202303021743018.png"></p><h3 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/2825958739/imgbed/posts202303021746402.png" alt="https://cdn.jsdelivr.net/gh/2825958739/imgbed/posts202303021746402.png"></p>]]></content>
      
      
      <categories>
          
          <category> 物联网应用集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 物联网应用 </tag>
            
            <tag> 智能小灯 </tag>
            
            <tag> 语音控制 </tag>
            
            <tag> App控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm运行项目时出错及解决方法</title>
      <link href="posts/d15571c7.html"/>
      <url>posts/d15571c7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1、npm-install报错"><a href="#1、npm-install报错" class="headerlink" title="1、npm install报错"></a>1、<code>npm install</code>报错</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/02/28/ppPVOWd.png" alt="https://s1.ax1x.com/2023/02/28/ppPVOWd.png"></p><h3 id="2、npm-run-serve-报错"><a href="#2、npm-run-serve-报错" class="headerlink" title="2、npm run serve 报错"></a>2、<code>npm run serve</code> 报错</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/02/28/ppPu2vj.png" alt="https://s1.ax1x.com/2023/02/28/ppPu2vj.png"></p><blockquote><p>原因与解决方案：电脑安装的node版本过高，安装低版本16.最好不使用17及以上版本，再次npm run serve即可</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/02/28/ppPuhbq.png" alt="https://s1.ax1x.com/2023/02/28/ppPuhbq.png"></p><h3 id="3、编译时出现下面错误"><a href="#3、编译时出现下面错误" class="headerlink" title="3、编译时出现下面错误"></a>3、编译时出现下面错误</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/02/28/ppPuXrR.png" alt="https://s1.ax1x.com/2023/02/28/ppPuXrR.png"></p><blockquote><p>原因与解决方案：这次的错误原因是<u>系统的环境变量没有配置好</u>，刚开始看网上说的还以为是端口被占用了，但是释放端口后还是报错。应该要在环境变量Path中添加<code>C:\Windows\System32</code>或<code>%SystemRoot%\system32;</code></p></blockquote><p>具体步骤：<em>右键我的电脑–高级系统设置–高级–环境变量–系统变量，找到Path，点击添加</em></p><p><strong>注意：</strong>设置完要重新启动vscode才可以生效哦！！</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/02/28/ppPuza6.png" alt="https://s1.ax1x.com/2023/02/28/ppPuza6.png"></p><h3 id="4、npm-run-dev-报错"><a href="#4、npm-run-dev-报错" class="headerlink" title="4、npm run dev 报错"></a>4、<code>npm run dev</code> 报错</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/02/28/ppPKPRe.png" alt="https://s1.ax1x.com/2023/02/28/ppPKPRe.png"></p><blockquote><p>原因与解决方案：8080端口被占用了，cmd输入<code>netstat -ano</code>找到 8080端口所在的 PID ，然后打开“<strong>任务管理器</strong>”找到PID，终止程序即可。</p></blockquote><p><a href="https://imgse.com/i/ppPKui8"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/02/28/ppPKui8.png" alt="ppPKui8.png"></a><br><a href="https://imgse.com/i/ppPKKJS"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/02/28/ppPKKJS.png" alt="ppPKKJS.png"></a></p><h3 id="5、node权限错误"><a href="#5、node权限错误" class="headerlink" title="5、node权限错误"></a>5、node权限错误</h3><p>Error: EPERM: operation not permitted, mkdir ‘E:\noddejs\node_modules\hexo-cli’]</p><blockquote><p>原因与解决方案：没有权限操作nodejs的安装目录。</p><p>在nodejs 的安装目录右击 选择 属性 &gt; tab栏点击 安全 &gt;   编辑按钮 &gt; 下边的权限至少选择到修改 &gt; 可以选择完全控制。然后再次运行安装命令即可。</p></blockquote><p><a href="https://s1.ax1x.com/2023/02/28/ppPK1Mj.png](https://s1.ax1x.com/2023/02/28/ppPK1Mj.png)"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/02/28/ppPK1Mj.png" alt="https://s1.ax1x.com/2023/02/28/ppPK1Mj.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 错误集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>koa2框架中使用nodemon热更新</title>
      <link href="posts/e69338fc.html"/>
      <url>posts/e69338fc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1、首先要在vscode终端使用如下命令安装nodemon"><a href="#1、首先要在vscode终端使用如下命令安装nodemon" class="headerlink" title="1、首先要在vscode终端使用如下命令安装nodemon"></a>1、首先要在vscode终端使用如下命令安装nodemon</h3><blockquote><p>npm install nodemon –save</p></blockquote><h3 id="2、在项目package-json文件中配置启动命令"><a href="#2、在项目package-json文件中配置启动命令" class="headerlink" title="2、在项目package.json文件中配置启动命令"></a>2、在项目package.json文件中配置启动命令</h3><p>本来的命令是 <code>start:node  bin/www</code>改为<code>start:nodemon  bin/www</code>即可</p><p>使用<code>npm start</code>启动项目，启动成功，以后再修改代码时项目就会自动更新加载了。</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/02/27/ppCuLlj.png" alt="https://s1.ax1x.com/2023/02/27/ppCuLlj.png"></h2>]]></content>
      
      
      <categories>
          
          <category> 工具篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodemon </tag>
            
            <tag> koa2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo+GitHub 图床搭建</title>
      <link href="posts/7a46f93c.html"/>
      <url>posts/7a46f93c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>用GitHub搭建图床，在很久之前我就有了解，但由于市面上有挺多免费的图床，比如我之前一直在用的 路过图床，所以一直懒得动手搭建GitHub图床。一直到前两天我在完善博客的相册时，发现 路过图床 免费版的有这么多限制，比如：每小时限制上传50张图片，每天限制上传100张图片，而且免费版用户的存储容量貌似不过300M，这才意识到有一个自己的GitHub图床是多么重要。</p><h3 id="0x001-PicGO-介绍"><a href="#0x001-PicGO-介绍" class="headerlink" title="0x001 PicGO 介绍"></a>0x001 PicGO 介绍</h3><p>PicGo是一款图片上传工具，目前支持 SM.MS图床、腾讯云COS、GitHub图床、七牛图床、Imgur图床、阿里云OSS、又拍云图床，未来将支持更多图床。</p><p>在支持的这些图床中，SM.MS和Imgur有免费版和收费版，免费版的肯定有很多的使用限制，比如每小时限制上传次数，限制用户的上传容量等等；腾讯云COS、阿里云、有拍云都是要收费使用的；七牛云貌似前期使用免费，后期又要收费才能使用，就剩下的GitHub才是免费且最可靠的。</p><p>PicGo源项目GitHub地址已给出，但是去GitHub下载速度非常慢，这里额外提供一个蓝奏云的快速下载地址。</p><ul><li>GitHub地址：<a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></li></ul><h3 id="0x002-GitHub-图床"><a href="#0x002-GitHub-图床" class="headerlink" title="0x002 GitHub 图床"></a>0x002 GitHub 图床</h3><h4 id="1-创建GitHub图床仓库"><a href="#1-创建GitHub图床仓库" class="headerlink" title="1. 创建GitHub图床仓库"></a>1. 创建GitHub图床仓库</h4><p>首先需要有一个登录GitHub的账号，没有的话去<a href="https://github.com/">GitHub官网</a>注册一个</p><p>创建一个新的图床仓库，点击右上角的New repository</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529155833.png"></p><p>填写如下配置信息，然后Create创建仓库</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529160010.png"></p><h4 id="2-获取GitHub-token值"><a href="#2-获取GitHub-token值" class="headerlink" title="2. 获取GitHub token值"></a>2. 获取GitHub token值</h4><p>点击右上的头像，选择设置Setting</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529160727.png"></p><p>点击选择Developer settings </p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529160939.png"></p><p>点击 Generate New token</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529161241.png"></p><p>填写如下配置信息，只要勾选repo选项即可，然后页面拉到底部点击Generate token 即可</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529161716.png"></p><p>此时会跳转到带有token的页面，将token值复制记录下来，之后用PicGo绑定GitHub图床时会利用到</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529162127.png"></p><h3 id="0x003-PicGo-配置"><a href="#0x003-PicGo-配置" class="headerlink" title="0x003 PicGo 配置"></a>0x003 PicGo 配置</h3><h4 id="1-绑定GitHub图床"><a href="#1-绑定GitHub图床" class="headerlink" title="1. 绑定GitHub图床"></a>1. 绑定GitHub图床</h4><p>首先下载安装好PicGo软件，然后在右列表找到GitHub图床配置</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529163130.png"></p><p><strong>1. 设定仓库名(必填)：</strong> </p><p>按照“GitHub账户名/仓库名的格式填写”，比如我的是：Luckyzmj/imgbed</p><p><strong>2. 设定分支名(必填)：</strong> </p><p>仓库分支名填写”master”或者”main”，视情况而定。因为GitHub 官方表示,从2020年10月1日起,在该平台上创建的所有新的源代码仓库将默认被命名为”main”,而不是原先的”master”。</p><p><strong>3. 设定Token(必填)：</strong> </p><p>将之前步骤的Token值复制粘贴到这里</p><p><strong>4. 指定存储路径：</strong> </p><p>这个选项可以为空，如果想将图片上传到仓库的指定目录下，可以填写目录名加/，比如我的imgbed仓库下有个posts文件夹，需设置为 posts/</p><p><strong>5. 设定自定义域名：</strong> </p><p>这里统一用jsdelivr的CDN加速域名，在上传图片后成功后，PicGo会将“自定义域名+上传的图片名”生成的访问链接</p><pre class="line-numbers language-none"><code class="language-none">自定义域名格式：https://cdn.jsdelivr.net/gh/GitHub账户名/仓库名以我的格式为例：https://cdn.jsdelivr.net/gh/Luckyzmj/imgbed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>配置完全部信息后，点击 设为默认图床，最后点击确定即可</p><h4 id="2-上传图片到图床"><a href="#2-上传图片到图床" class="headerlink" title="2. 上传图片到图床"></a>2. 上传图片到图床</h4><p>在上传区上传图片，可支持本地图片上传(可多选图片)、剪贴板上传、URL上传等三种方式。上传图片成功后，选择你想要生成的图片链接格式</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529170555.png"></p><p>在图片区，可以看到成功上传的图片，选择相应的图片进行操作即可</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529170831.png"></p><h4 id="3-PicGo-注意事项"><a href="#3-PicGo-注意事项" class="headerlink" title="3. PicGo 注意事项"></a>3. PicGo 注意事项</h4><p>如果配置完PicGo后却上传图片失败，可以参考以下方法：</p><ol><li>检查自定义域名是否正确</li><li>仓库名不要有空格</li><li>图片名字不要带有特殊符号，如：%、+、*、空格等</li><li>建议开启时间戳重命名，防止图片名字重复</li><li>上传图片间歇太短，需在PicGo设置中关闭Server选项</li><li>PicGo应用不稳定因素，需重启应用</li></ol><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://blog.csdn.net/sunhwee/article/details/100109956">https://blog.csdn.net/sunhwee/article/details/100109956</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicGo </tag>
            
            <tag> GitHub图床 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
