<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>无定文集</title>
  
  <subtitle>㲽木的博客</subtitle>
  <link href="https://2825958739.github.io/atom.xml" rel="self"/>
  
  <link href="https://2825958739.github.io/"/>
  <updated>2023-02-28T10:42:13.543Z</updated>
  <id>https://2825958739.github.io/</id>
  
  <author>
    <name>ChenLiang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>npm运行项目时出错及解决方法</title>
    <link href="https://2825958739.github.io/posts/7a46f93c.html"/>
    <id>https://2825958739.github.io/posts/7a46f93c.html</id>
    <published>2023-02-28T08:58:58.000Z</published>
    <updated>2023-02-28T10:42:13.543Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1、npm-install报错"><a href="#1、npm-install报错" class="headerlink" title="1、npm install报错"></a>1、<code>npm install</code>报错</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/02/28/ppPVOWd.png" alt="https://s1.ax1x.com/2023/02/28/ppPVOWd.png"></p><h3 id="2、npm-run-serve-报错"><a href="#2、npm-run-serve-报错" class="headerlink" title="2、npm run serve 报错"></a>2、<code>npm run serve</code> 报错</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/02/28/ppPu2vj.png" alt="https://s1.ax1x.com/2023/02/28/ppPu2vj.png"></p><blockquote><p>原因与解决方案：电脑安装的node版本过高，安装低版本16.最好不使用17及以上版本，再次npm run serve即可</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/02/28/ppPuhbq.png" alt="https://s1.ax1x.com/2023/02/28/ppPuhbq.png"></p><h3 id="3、编译时出现下面错误"><a href="#3、编译时出现下面错误" class="headerlink" title="3、编译时出现下面错误"></a>3、编译时出现下面错误</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/02/28/ppPuXrR.png" alt="https://s1.ax1x.com/2023/02/28/ppPuXrR.png"></p><blockquote><p>原因与解决方案：这次的错误原因是<u>系统的环境变量没有配置好</u>，刚开始看网上说的还以为是端口被占用了，但是释放端口后还是报错。应该要在环境变量Path中添加<code>C:\Windows\System32</code>或<code>%SystemRoot%\system32;</code></p></blockquote><p>具体步骤：<em>右键我的电脑–高级系统设置–高级–环境变量–系统变量，找到Path，点击添加</em></p><p><strong>注意：</strong>设置完要重新启动vscode才可以生效哦！！</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/02/28/ppPuza6.png" alt="https://s1.ax1x.com/2023/02/28/ppPuza6.png"></p><h3 id="4、npm-run-dev-报错"><a href="#4、npm-run-dev-报错" class="headerlink" title="4、npm run dev 报错"></a>4、<code>npm run dev</code> 报错</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/02/28/ppPKPRe.png" alt="https://s1.ax1x.com/2023/02/28/ppPKPRe.png"></p><blockquote><p>原因与解决方案：8080端口被占用了，cmd输入<code>netstat -ano</code>找到 8080端口所在的 PID ，然后打开“<strong>任务管理器</strong>”找到PID，终止程序即可。</p></blockquote><p><a href="https://imgse.com/i/ppPKui8"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/02/28/ppPKui8.png" alt="ppPKui8.png"></a><br><a href="https://imgse.com/i/ppPKKJS"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/02/28/ppPKKJS.png" alt="ppPKKJS.png"></a></p><h3 id="5、node权限错误"><a href="#5、node权限错误" class="headerlink" title="5、node权限错误"></a>5、node权限错误</h3><p>Error: EPERM: operation not permitted, mkdir ‘E:\noddejs\node_modules\hexo-cli’]</p><blockquote><p>原因与解决方案：没有权限操作nodejs的安装目录。</p><p>在nodejs 的安装目录右击 选择 属性 &gt; tab栏点击 安全 &gt;   编辑按钮 &gt; 下边的权限至少选择到修改 &gt; 可以选择完全控制。然后再次运行安装命令即可。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/02/28/ppPK1Mj.png" alt="https://s1.ax1x.com/2023/02/28/ppPK1Mj.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="错误集" scheme="https://2825958739.github.io/categories/%E9%94%99%E8%AF%AF%E9%9B%86/"/>
    
    
    <category term="npm" scheme="https://2825958739.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>koa2框架中使用nodemon热更新</title>
    <link href="https://2825958739.github.io/posts/e69338fc.html"/>
    <id>https://2825958739.github.io/posts/e69338fc.html</id>
    <published>2023-02-27T13:03:56.000Z</published>
    <updated>2023-02-28T04:14:00.466Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1、首先要在vscode终端使用如下命令安装nodemon"><a href="#1、首先要在vscode终端使用如下命令安装nodemon" class="headerlink" title="1、首先要在vscode终端使用如下命令安装nodemon"></a>1、首先要在vscode终端使用如下命令安装nodemon</h3><blockquote><p>npm install nodemon –save</p></blockquote><h3 id="2、在项目package-json文件中配置启动命令"><a href="#2、在项目package-json文件中配置启动命令" class="headerlink" title="2、在项目package.json文件中配置启动命令"></a>2、在项目package.json文件中配置启动命令</h3><p>本来的命令是 <code>start:node  bin/www</code>改为<code>start:nodemon  bin/www</code>即可</p><p>使用<code>npm start</code>启动项目，启动成功，以后再修改代码时项目就会自动更新加载了。</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2023/02/27/ppCuLlj.png" alt="https://s1.ax1x.com/2023/02/27/ppCuLlj.png"></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="工具篇" scheme="https://2825958739.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AF%87/"/>
    
    
    <category term="nodemon" scheme="https://2825958739.github.io/tags/nodemon/"/>
    
    <category term="koa2" scheme="https://2825958739.github.io/tags/koa2/"/>
    
  </entry>
  
  <entry>
    <title>PicGo+GitHub 图床搭建</title>
    <link href="https://2825958739.github.io/posts/7a46f93c.html"/>
    <id>https://2825958739.github.io/posts/7a46f93c.html</id>
    <published>2023-02-04T16:00:00.000Z</published>
    <updated>2023-02-28T04:13:32.265Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>用GitHub搭建图床，在很久之前我就有了解，但由于市面上有挺多免费的图床，比如我之前一直在用的 路过图床，所以一直懒得动手搭建GitHub图床。一直到前两天我在完善博客的相册时，发现 路过图床 免费版的有这么多限制，比如：每小时限制上传50张图片，每天限制上传100张图片，而且免费版用户的存储容量貌似不过300M，这才意识到有一个自己的GitHub图床是多么重要。</p><h3 id="0x001-PicGO-介绍"><a href="#0x001-PicGO-介绍" class="headerlink" title="0x001 PicGO 介绍"></a>0x001 PicGO 介绍</h3><p>PicGo是一款图片上传工具，目前支持 SM.MS图床、腾讯云COS、GitHub图床、七牛图床、Imgur图床、阿里云OSS、又拍云图床，未来将支持更多图床。</p><p>在支持的这些图床中，SM.MS和Imgur有免费版和收费版，免费版的肯定有很多的使用限制，比如每小时限制上传次数，限制用户的上传容量等等；腾讯云COS、阿里云、有拍云都是要收费使用的；七牛云貌似前期使用免费，后期又要收费才能使用，就剩下的GitHub才是免费且最可靠的。</p><p>PicGo源项目GitHub地址已给出，但是去GitHub下载速度非常慢，这里额外提供一个蓝奏云的快速下载地址。</p><ul><li>GitHub地址：<a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></li></ul><h3 id="0x002-GitHub-图床"><a href="#0x002-GitHub-图床" class="headerlink" title="0x002 GitHub 图床"></a>0x002 GitHub 图床</h3><h4 id="1-创建GitHub图床仓库"><a href="#1-创建GitHub图床仓库" class="headerlink" title="1. 创建GitHub图床仓库"></a>1. 创建GitHub图床仓库</h4><p>首先需要有一个登录GitHub的账号，没有的话去<a href="https://github.com/">GitHub官网</a>注册一个</p><p>创建一个新的图床仓库，点击右上角的New repository</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529155833.png"></p><p>填写如下配置信息，然后Create创建仓库</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529160010.png"></p><h4 id="2-获取GitHub-token值"><a href="#2-获取GitHub-token值" class="headerlink" title="2. 获取GitHub token值"></a>2. 获取GitHub token值</h4><p>点击右上的头像，选择设置Setting</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529160727.png"></p><p>点击选择Developer settings </p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529160939.png"></p><p>点击 Generate New token</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529161241.png"></p><p>填写如下配置信息，只要勾选repo选项即可，然后页面拉到底部点击Generate token 即可</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529161716.png"></p><p>此时会跳转到带有token的页面，将token值复制记录下来，之后用PicGo绑定GitHub图床时会利用到</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529162127.png"></p><h3 id="0x003-PicGo-配置"><a href="#0x003-PicGo-配置" class="headerlink" title="0x003 PicGo 配置"></a>0x003 PicGo 配置</h3><h4 id="1-绑定GitHub图床"><a href="#1-绑定GitHub图床" class="headerlink" title="1. 绑定GitHub图床"></a>1. 绑定GitHub图床</h4><p>首先下载安装好PicGo软件，然后在右列表找到GitHub图床配置</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529163130.png"></p><p><strong>1. 设定仓库名(必填)：</strong> </p><p>按照“GitHub账户名/仓库名的格式填写”，比如我的是：Luckyzmj/imgbed</p><p><strong>2. 设定分支名(必填)：</strong> </p><p>仓库分支名填写”master”或者”main”，视情况而定。因为GitHub 官方表示,从2020年10月1日起,在该平台上创建的所有新的源代码仓库将默认被命名为”main”,而不是原先的”master”。</p><p><strong>3. 设定Token(必填)：</strong> </p><p>将之前步骤的Token值复制粘贴到这里</p><p><strong>4. 指定存储路径：</strong> </p><p>这个选项可以为空，如果想将图片上传到仓库的指定目录下，可以填写目录名加/，比如我的imgbed仓库下有个posts文件夹，需设置为 posts/</p><p><strong>5. 设定自定义域名：</strong> </p><p>这里统一用jsdelivr的CDN加速域名，在上传图片后成功后，PicGo会将“自定义域名+上传的图片名”生成的访问链接</p><pre class="line-numbers language-none"><code class="language-none">自定义域名格式：https://cdn.jsdelivr.net/gh/GitHub账户名/仓库名以我的格式为例：https://cdn.jsdelivr.net/gh/Luckyzmj/imgbed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>配置完全部信息后，点击 设为默认图床，最后点击确定即可</p><h4 id="2-上传图片到图床"><a href="#2-上传图片到图床" class="headerlink" title="2. 上传图片到图床"></a>2. 上传图片到图床</h4><p>在上传区上传图片，可支持本地图片上传(可多选图片)、剪贴板上传、URL上传等三种方式。上传图片成功后，选择你想要生成的图片链接格式</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529170555.png"></p><p>在图片区，可以看到成功上传的图片，选择相应的图片进行操作即可</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529170831.png"></p><h4 id="3-PicGo-注意事项"><a href="#3-PicGo-注意事项" class="headerlink" title="3. PicGo 注意事项"></a>3. PicGo 注意事项</h4><p>如果配置完PicGo后却上传图片失败，可以参考以下方法：</p><ol><li>检查自定义域名是否正确</li><li>仓库名不要有空格</li><li>图片名字不要带有特殊符号，如：%、+、*、空格等</li><li>建议开启时间戳重命名，防止图片名字重复</li><li>上传图片间歇太短，需在PicGo设置中关闭Server选项</li><li>PicGo应用不稳定因素，需重启应用</li></ol><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://blog.csdn.net/sunhwee/article/details/100109956">https://blog.csdn.net/sunhwee/article/details/100109956</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="博客篇" scheme="https://2825958739.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"/>
    
    
    <category term="PicGo" scheme="https://2825958739.github.io/tags/PicGo/"/>
    
    <category term="GitHub图床" scheme="https://2825958739.github.io/tags/GitHub%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
</feed>
